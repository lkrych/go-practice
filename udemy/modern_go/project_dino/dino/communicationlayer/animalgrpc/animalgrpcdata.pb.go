// Code generated by protoc-gen-go. DO NOT EDIT.
// source: animalgrpcdata.proto

/*
Package animalgrpc is a generated protocol buffer package.

It is generated from these files:
	animalgrpcdata.proto

It has these top-level messages:
	Animal
	Request
*/
package animalgrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Animal struct {
	Id         int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AnimalType string `protobuf:"bytes,2,opt,name=animal_type,json=animalType" json:"animal_type,omitempty"`
	Nickname   string `protobuf:"bytes,3,opt,name=nickname" json:"nickname,omitempty"`
	Zone       int32  `protobuf:"varint,4,opt,name=zone" json:"zone,omitempty"`
	Age        int32  `protobuf:"varint,5,opt,name=age" json:"age,omitempty"`
}

func (m *Animal) Reset()                    { *m = Animal{} }
func (m *Animal) String() string            { return proto.CompactTextString(m) }
func (*Animal) ProtoMessage()               {}
func (*Animal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Animal) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Animal) GetAnimalType() string {
	if m != nil {
		return m.AnimalType
	}
	return ""
}

func (m *Animal) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Animal) GetZone() int32 {
	if m != nil {
		return m.Zone
	}
	return 0
}

func (m *Animal) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type Request struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname" json:"nickname,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func init() {
	proto.RegisterType((*Animal)(nil), "animalgrpc.animal")
	proto.RegisterType((*Request)(nil), "animalgrpc.request")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AnimalService service

type AnimalServiceClient interface {
	GetAnimal(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Animal, error)
	GetAllAnimals(ctx context.Context, in *Request, opts ...grpc.CallOption) (AnimalService_GetAllAnimalsClient, error)
}

type animalServiceClient struct {
	cc *grpc.ClientConn
}

func NewAnimalServiceClient(cc *grpc.ClientConn) AnimalServiceClient {
	return &animalServiceClient{cc}
}

func (c *animalServiceClient) GetAnimal(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Animal, error) {
	out := new(Animal)
	err := grpc.Invoke(ctx, "/animalgrpc.AnimalService/GetAnimal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animalServiceClient) GetAllAnimals(ctx context.Context, in *Request, opts ...grpc.CallOption) (AnimalService_GetAllAnimalsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AnimalService_serviceDesc.Streams[0], c.cc, "/animalgrpc.AnimalService/GetAllAnimals", opts...)
	if err != nil {
		return nil, err
	}
	x := &animalServiceGetAllAnimalsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnimalService_GetAllAnimalsClient interface {
	Recv() (*Animal, error)
	grpc.ClientStream
}

type animalServiceGetAllAnimalsClient struct {
	grpc.ClientStream
}

func (x *animalServiceGetAllAnimalsClient) Recv() (*Animal, error) {
	m := new(Animal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AnimalService service

type AnimalServiceServer interface {
	GetAnimal(context.Context, *Request) (*Animal, error)
	GetAllAnimals(*Request, AnimalService_GetAllAnimalsServer) error
}

func RegisterAnimalServiceServer(s *grpc.Server, srv AnimalServiceServer) {
	s.RegisterService(&_AnimalService_serviceDesc, srv)
}

func _AnimalService_GetAnimal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalServiceServer).GetAnimal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animalgrpc.AnimalService/GetAnimal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalServiceServer).GetAnimal(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimalService_GetAllAnimals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnimalServiceServer).GetAllAnimals(m, &animalServiceGetAllAnimalsServer{stream})
}

type AnimalService_GetAllAnimalsServer interface {
	Send(*Animal) error
	grpc.ServerStream
}

type animalServiceGetAllAnimalsServer struct {
	grpc.ServerStream
}

func (x *animalServiceGetAllAnimalsServer) Send(m *Animal) error {
	return x.ServerStream.SendMsg(m)
}

var _AnimalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "animalgrpc.AnimalService",
	HandlerType: (*AnimalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnimal",
			Handler:    _AnimalService_GetAnimal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllAnimals",
			Handler:       _AnimalService_GetAllAnimals_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "animalgrpcdata.proto",
}

func init() { proto.RegisterFile("animalgrpcdata.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0xcc, 0xcb, 0xcc,
	0x4d, 0xcc, 0x49, 0x2f, 0x2a, 0x48, 0x4e, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x42, 0x88, 0x2a, 0x55, 0x73, 0xb1, 0x41, 0x78, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x4c, 0x99, 0x29, 0x42, 0xf2, 0x5c, 0xdc, 0x10, 0x99,
	0xf8, 0x92, 0xca, 0x82, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0xa8, 0xd6, 0x90, 0xca,
	0x82, 0x54, 0x21, 0x29, 0x2e, 0x8e, 0xbc, 0xcc, 0xe4, 0xec, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x66,
	0xb0, 0x2c, 0x9c, 0x2f, 0x24, 0xc4, 0xc5, 0x52, 0x95, 0x9f, 0x97, 0x2a, 0xc1, 0x02, 0x36, 0x0e,
	0xcc, 0x16, 0x12, 0xe0, 0x62, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x05, 0x0b, 0x81, 0x98, 0x4a, 0xaa,
	0x5c, 0xec, 0x45, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x28, 0x86, 0x31, 0xa2, 0x1a, 0x66, 0xd4,
	0xc8, 0xc8, 0xc5, 0xeb, 0x08, 0xb6, 0x37, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x84,
	0x8b, 0xd3, 0x3d, 0xb5, 0x04, 0x22, 0x26, 0x24, 0xac, 0x87, 0xf0, 0x8f, 0x1e, 0xd4, 0x3c, 0x29,
	0x21, 0x64, 0x41, 0xa8, 0x0f, 0xad, 0xb8, 0x78, 0x41, 0xba, 0x72, 0x72, 0x20, 0x1a, 0x8b, 0x89,
	0xd6, 0x69, 0xc0, 0x98, 0xc4, 0x06, 0x0e, 0x3a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41,
	0x43, 0xbf, 0x38, 0x52, 0x01, 0x00, 0x00,
}
